{"ast":null,"code":"import _toConsumableArray from \"/Users/admin/Desktop/GITHUB2021/Ethergram/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/admin/Desktop/GITHUB2021/Ethergram/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/admin/Desktop/GITHUB2021/Ethergram/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/admin/Desktop/GITHUB2021/Ethergram/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/admin/Desktop/GITHUB2021/Ethergram/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/admin/Desktop/GITHUB2021/Ethergram/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/admin/Desktop/GITHUB2021/Ethergram/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/admin/Desktop/GITHUB2021/Ethergram/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/admin/Desktop/GITHUB2021/Ethergram/src/components/App.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport './App.css';\nimport Ethergram from '../abis/Ethergram.json';\nimport Navbar from './Navbar';\nimport Main from './Main';\n\nvar ipfsClient = require('ipfs-http-client');\n\nvar ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https'\n});\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var web3, accounts, networkId, ethergramData, ethergram, imageCount, i, image;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                web3 = window.web3;\n                _context2.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context2.sent;\n                this.setState({\n                  account: accounts[0]\n                });\n                _context2.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context2.sent;\n                // Load Ethergram.sol\n                ethergramData = Ethergram.networks[networkId];\n\n                if (!ethergramData) {\n                  _context2.next = 28;\n                  break;\n                }\n\n                ethergram = new web3.eth.Contract(Ethergram.abi, ethergramData.address);\n                this.setState({\n                  ethergram: ethergram\n                }); //Load the images by 1st calling the imageCount() and add it to your state\n\n                _context2.next = 14;\n                return ethergram.methods.imageCount().call();\n\n              case 14:\n                imageCount = _context2.sent;\n                this.setState({\n                  imageCount: imageCount\n                }); //LOAD IMAGES by looping through the images mapping\n\n                i = 1;\n\n              case 17:\n                if (!(i <= imageCount)) {\n                  _context2.next = 25;\n                  break;\n                }\n\n                _context2.next = 20;\n                return ethergram.methods.images(i).call();\n\n              case 20:\n                image = _context2.sent;\n                this.setState({\n                  images: [].concat(_toConsumableArray(this.state.images), [image])\n                });\n\n              case 22:\n                i++;\n                _context2.next = 17;\n                break;\n\n              case 25:\n                this.setState({\n                  loading: false\n                });\n                _context2.next = 29;\n                break;\n\n              case 28:\n                window.alert('Etherscan contract not deployed to detected network.');\n\n              case 29:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context3.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context3.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n                }\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.captureFile = function (event) {\n      event.preventDefault();\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = function () {\n        _this.setState({\n          buffer: Buffer(reader.result)\n        });\n\n        console.log('buffer', _this.state.buffer);\n      };\n    };\n\n    _this.uploadImage = function (description) {\n      console.log(\"Submitting file to ipfs...\"); //adding file to the IPFS\n\n      ipfs.add(_this.state.buffer, function (error, result) {\n        console.log('Ipfs result', result);\n\n        if (error) {\n          console.error(error);\n          return;\n        }\n\n        _this.setState({\n          loading: true\n        });\n\n        _this.state.ethergram.methods.uploadImage(result[0].hash, description).send({\n          from: _this.state.account\n        }).on('transactionHash', function (hash) {\n          _this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    _this.state = {\n      account: '',\n      ethergram: null,\n      images: [],\n      loading: true,\n      buffer: null\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        account: this.state.account,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }), this.state.loading ? React.createElement(\"div\", {\n        id: \"loader\",\n        className: \"text-center mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"Loading...\")) : React.createElement(Main, {\n        images: this.state.images,\n        captureFile: this.captureFile,\n        uploadImage: this.uploadImage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/admin/Desktop/GITHUB2021/Ethergram/src/components/App.js"],"names":["React","Component","Web3","Ethergram","Navbar","Main","ipfsClient","require","ipfs","host","port","protocol","App","loadWeb3","loadBlockchainData","web3","window","eth","getAccounts","accounts","setState","account","net","getId","networkId","ethergramData","networks","ethergram","Contract","abi","address","methods","imageCount","call","i","images","image","state","loading","alert","ethereum","enable","currentProvider","props","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","buffer","Buffer","result","console","log","uploadImage","description","add","error","hash","send","from","on"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport './App.css';\nimport Ethergram from '../abis/Ethergram.json';\nimport Navbar from './Navbar';\nimport Main from './Main';\n\nconst ipfsClient=require('ipfs-http-client')\nconst ipfs = ipfsClient({host: 'ipfs.infura.io', port:5001, protocol: 'https'})\n\nclass App extends Component {\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n  async loadBlockchainData() {\n    const web3 = window.web3\n\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n\n    const networkId = await web3.eth.net.getId()\n\n    // Load Ethergram.sol\n    const ethergramData = Ethergram.networks[networkId]\n    if(ethergramData) {\n      const ethergram = new web3.eth.Contract(Ethergram.abi, ethergramData.address)\n      this.setState({ ethergram })\n        //Load the images by 1st calling the imageCount() and add it to your state\n     const imageCount = await ethergram.methods.imageCount().call()\n     this.setState({imageCount})\n     //LOAD IMAGES by looping through the images mapping\n     for(var i =1; i<=imageCount; i++){\n       const image = await ethergram.methods.images(i).call()\n       this.setState({images:[...this.state.images, image]})\n     }\n\n     this.setState({loading: false})\n    } else {\n      window.alert('Etherscan contract not deployed to detected network.')\n    }\n  }\n   captureFile=(event)=>{\n      event.preventDefault()\n      const file = event.target.files[0] \n      const reader = new window.FileReader()\n      reader.readAsArrayBuffer(file)\n\n      reader.onloadend=()=>{\n        this.setState({buffer: Buffer(reader.result)})\n        console.log('buffer', this.state.buffer)\n      }\n  }\n  uploadImage = description => {\n    console.log(\"Submitting file to ipfs...\")\n\n    //adding file to the IPFS\n    ipfs.add(this.state.buffer, (error, result) => {\n      console.log('Ipfs result', result)\n      if(error) {\n        console.error(error)\n        return\n      }\n\n      this.setState({ loading: true })\n      this.state.ethergram.methods.uploadImage(result[0].hash, description).send({ from: this.state.account }).on('transactionHash', (hash) => {\n        this.setState({ loading: false })\n      })\n    })\n  }\n\n\n\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  constructor(props) {\n    super(props)\n    this.state={\n      account:'',\n      ethergram:null,\n      images:[],\n      loading: true,\n      buffer:null\n    }\n  }\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        { this.state.loading\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\n          : <Main\n              images= {this.state.images}\n              captureFile={this.captureFile}\n              uploadImage={this.uploadImage}\n            />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}